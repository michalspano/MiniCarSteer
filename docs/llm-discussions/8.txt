gpt4-turbo
USER:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import joblib

# Initialize a list to hold DataFrames
data_frames = []

# Loop to read and combine data
for x in range(1, 7):
    try:
        steering_filename = f'car.{x}.steering.txt'
        velocity_filename = f'car.{x}.velocity.txt'
        
        steering_data = pd.read_csv(steering_filename, names=['steering_angle'])
        velocity_data = pd.read_csv(velocity_filename, names=['velocity'])
        
        # Validate data lengths
        if len(steering_data) != len(velocity_data):
            raise Exception(f"Mismatch in data lengths for car {x}")
        
        # Combining velocity and steering data into a single DataFrame
        combined_data = pd.concat([velocity_data, steering_data], axis=1)
        data_frames.append(combined_data)
    except FileNotFoundError as e:
        print(f"File not found for car {x}: {e}")

# Concatenating all data frames in the list into a single DataFrame
all_data = pd.concat(data_frames, ignore_index=True)

# Splitting data into features (X) and the target variable (y)
X = all_data[['velocity']]
y = all_data['steering_angle']

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Random Forest Regressor
rf = RandomForestRegressor(n_estimators=50,max_depth=5)

# Train the model
rf.fit(X_train, y_train)

# Predict on the testing set
y_pred = rf.predict(X_test)

# Evaluate the model with Mean Squared Error
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# Save the model to disk
joblib.dump(rf, 'steering_prediction_model.pkl')

print("Model saved successfully!")

Graph the predicted vs actual values using matplotlib

Assistant:

To graph the predicted versus actual steering angles using matplotlib, you need to first ensure you have matplotlib installed. If not, you can install it via pip:

```
pip install matplotlib
```

After ensuring matplotlib is installed, you can use the following code snippet to plot the actual versus predicted steering angles:

```python
import matplotlib.pyplot as plt

# Plotting Actual vs. Predicted
plt.figure(figsize=(10, 6))  # Set figure size
plt.scatter(X_test, y_test, color='black', label='Actual')  # Plot actual values
plt.scatter(X_test, y_pred, color='green', alpha=0.5, label='Predicted')  # Plot predicted values
plt.title('Actual vs Predicted Steering Angles')  # Title of the plot
plt.xlabel('Velocity')  # X-axis label
plt.ylabel('Steering Angle')  # Y-axis label
plt.legend()  # Show legend
plt.show()  # Show plot
```

This code snippet plots both the actual and predicted steering angles based on the velocities from your test set. The `X_test` values are plotted on the X-axis, and both `y_test` (actual values) and `y_pred` (predicted values) are plotted on the Y-axis. 

Using different colors and an opacity setting (`alpha`) helps you visually distinguish between the actual and the predicted values, making it easier to assess how well your model is performing. The inclusion of the legend enables viewers to clearly understand what each color represents.

Keep in mind, the scatter plot will show individual points and may not clearly articulate the relationship if your dataset is particularly large or if there are many overlapping points. In such cases, alternative visualization techniques or sampling the data points might provide clearer insights.
